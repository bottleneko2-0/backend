generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model add_article {
  id         Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id    Int?
  article_id String    @unique(map: "article_id_UNIQUE") @db.VarChar(5)
  title      String    @db.VarChar(10)
  content    String?   @db.VarChar(45)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_articles_user_id")

  @@index([user_id], map: "fk_articles_user_id_idx")
}

model users_test {
  id          Int     @unique(map: "id_UNIQUE") @default(autoincrement())
  username    String? @db.VarChar(50)
  email       String  @unique @db.VarChar(100)
  password    String  @db.VarChar(255)
  google_auth Int?    @db.TinyInt
}

model comment_area {
  id                     Int                      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  username               String                   @db.VarChar(45)
  created_at             DateTime                 @db.Timestamp(0)
  content                String                   @db.Text
  like_count             Int                      @default(0)
  profile_picture_url    String                   @db.VarChar(255)
  accountId              Int?
  account_page           account_page?            @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_id")
  user_comment_reactions user_comment_reactions[]

  @@index([accountId], map: "fk_account_id")
}

model deck_list {
  id               Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  deck_id          String    @unique(map: "deck_id_UNIQUE") @db.VarChar(5)
  user_email       String    @db.VarChar(45)
  deck_name        String    @db.VarChar(45)
  deck             Json
  deck_cover       String    @db.VarChar(255)
  deck_description String    @db.VarChar(255)
  build_time       DateTime? @default(now()) @db.Timestamp(0)
  users            users     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_user_id")

  @@index([user_id], map: "fk_user_id_idx")
}

model user_auths {
  id              Int                  @id @default(autoincrement())
  user_id         Int?
  auth_type       user_auths_auth_type
  auth_provide    String?              @db.VarChar(45)
  auth_provide_id String?              @db.VarChar(100)
  auth_email      String               @unique(map: "auth_email_UNIQUE") @db.VarChar(45)
  password_hash   String?              @db.VarChar(255)
  created_at      DateTime?            @default(now()) @db.Timestamp(0)
  last_login      DateTime?            @db.Timestamp(0)
  users           users?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_id")

  @@index([user_id], map: "fk_users_id_idx")
}

model users {
  id          Int           @id @default(autoincrement())
  email       String        @unique(map: "email_UNIQUE") @db.VarChar(45)
  username    String?       @default("User") @db.VarChar(45)
  picture     String?       @db.VarChar(255)
  created_at  DateTime?     @default(now()) @db.Timestamp(0)
  updated_at  DateTime?     @default(now()) @db.Timestamp(0)
  add_article add_article[]
  deck_list   deck_list[]
  user_auths  user_auths[]
}

model account_page {
  id                     Int                      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  username               String                   @unique @db.VarChar(45)
  profile_picture_url    String                   @db.VarChar(255)
  comment_area           comment_area[]
  user_comment_reactions user_comment_reactions[]
}

model user_comment_reactions {
  id           Int          @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id      Int
  message_id   Int
  liked        Boolean
  bad_liked    Boolean
  comment_area comment_area @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "message_id")
  account_page account_page @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_id")

  @@id([user_id, message_id])
  @@index([message_id], map: "message_id")
}

enum user_auths_auth_type {
  local
  oauth
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model add_article {
  id           Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id      Int?
  deck_id      Int?
  post_code    String     @unique(map: "post_code_UNIQUE") @db.VarChar(5)
  post_picture String?    @db.VarChar(255)
  title        String     @db.VarChar(10)
  content      String?    @db.VarChar(45)
  created_at   DateTime?  @default(now()) @db.Timestamp(0)
  deck_list    deck_list? @relation(fields: [deck_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_articles_deck_id")
  users        users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_articles_user_id")
  comment      comment[]
  notice       notice[]

  @@index([deck_id], map: "fk_articles_deck_id")
  @@index([user_id], map: "fk_articles_user_id_idx")
  @@index([post_code], map: "post_code")
}

model deck_list {
  id               Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id          Int
  deck_id          String        @unique(map: "deck_id_UNIQUE") @db.VarChar(5)
  user_email       String        @db.VarChar(45)
  deck_name        String        @db.VarChar(45)
  deck             Json
  deck_cover       String        @db.VarChar(255)
  deck_description String        @db.VarChar(255)
  build_time       DateTime?     @default(now()) @db.Timestamp(0)
  add_article      add_article[]
  users            users         @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_user_id")

  @@index([user_id], map: "fk_user_id_idx")
}

model order_list {
  id       Int    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  order_id String @db.VarChar(45)
  user_id  Int    @unique(map: "user_id_UNIQUE")
  users    users  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_order_user_id")

  @@index([user_id], map: "fk_user_id_idx")
}

model user_auths {
  id              Int                  @id @default(autoincrement())
  user_id         Int?
  auth_type       user_auths_auth_type
  auth_provide    String?              @db.VarChar(45)
  auth_provide_id String?              @db.VarChar(100)
  auth_email      String               @unique(map: "auth_email_UNIQUE") @db.VarChar(45)
  password_hash   String?              @db.VarChar(255)
  created_at      DateTime?            @default(now()) @db.Timestamp(0)
  last_login      DateTime?            @db.Timestamp(0)
  users           users?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_id")

  @@index([user_id], map: "fk_users_id_idx")
}

model users {
  id          Int           @id @default(autoincrement())
  email       String        @unique(map: "email_UNIQUE") @db.VarChar(45)
  username    String?       @default("User") @db.VarChar(45)
  picture     String?       @db.VarChar(255)
  created_at  DateTime?     @default(now()) @db.Timestamp(0)
  updated_at  DateTime?     @default(now()) @db.Timestamp(0)
  add_article add_article[]
  comment     comment[]
  deck_list   deck_list[]
  notice      notice[]
  order_list  order_list?
  reaction    reaction[]
  user_auths  user_auths[]
}

model users_test {
  id          Int     @unique(map: "id_UNIQUE") @default(autoincrement())
  username    String? @db.VarChar(50)
  email       String  @unique @db.VarChar(100)
  password    String  @db.VarChar(255)
  google_auth Int?    @db.TinyInt
}

model comment {
  id          Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id     Int
  article_id  Int
  message     String      @db.Text
  like_count  Int
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  users       users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_comment_test_user_id")
  add_article add_article @relation(fields: [article_id], references: [id], onDelete: Cascade, map: "fk_comment_test_article_id")
  reaction    reaction[]

  @@index([user_id], map: "FK_comment_test_user_id")
  @@index([article_id], map: "fk_comment_test_article_id")
}

model notice {
  id          Int         @id @default(autoincrement())
  user_id     Int
  article_id  Int
  comment_id  Int
  type        String?     @db.VarChar(45)
  is_read     Boolean
  reaction_id Int?
  add_article add_article @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notice_article_id")
  reaction    reaction?   @relation(fields: [reaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notice_reaction_id")
  users       users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_notice_user_id")

  @@index([article_id], map: "fk_notice_article_id")
  @@index([comment_id], map: "fk_notice_comment_id")
  @@index([reaction_id], map: "fk_notice_reaction_id")
  @@index([user_id], map: "fk_notice_user_id")
}

model reaction {
  id         Int       @id @default(autoincrement())
  comment_id Int
  user_id    Int
  liked      Boolean   @default(false)
  disliked   Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  notice     notice[]
  comment    comment   @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_comment_reactions_comment_id")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_comment_reactions_user_id")

  @@index([comment_id], map: "fk_comment_reactions_comment_id")
  @@index([user_id], map: "fk_comment_reactions_user_id")
}

enum user_auths_auth_type {
  local
  oauth
}